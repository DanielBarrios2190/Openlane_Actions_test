name: Digital flow

on:
  workflow_dispatch: # Trigger manually

jobs:
  install-and-run:
    runs-on: ubuntu-20.04  # Use Ubuntu 20.04 environment for the workflow

    steps:
    # Step 1: Check out the repository
    - name: Check out repository
      uses: actions/checkout@v4

    # Step 2: Update and upgrade the system packages
    - name: Update and upgrade system
      run: |
        sudo apt-get update  # Fetch the latest package information
        sudo apt-get upgrade -y  # Upgrade all packages to their latest versions

    # Step 3: Install required system packages
    - name: Install required packages
      run: |
        sudo apt install -y build-essential python3 python3-venv python3-pip python3-tk curl make git docker.io
        # build-essential: Compilation tools
        # python3, python3-venv, python3-pip: Python setup
        # python3-tk: Required for graphical Python applications
        # curl, make, git: Utilities for development
        # docker.io: For running Docker containers

    # Step 4: Verify Docker and Python installations
    - name: Verify Docker and Python installations
      run: |
        docker --version  # Check Docker installation
        python3 --version  # Check Python installation
        python3 -m pip --version  # Check pip installation

    # Step 5: Install OpenLane Python package
    - name: Install OpenLane
      run: python3 -m pip install openlane

    # Step 6: Run OpenLane flow
    - name: Run OpenLane
      run: |
        cd my_project
        python3 -m openlane --docker-no-tty --dockerized --flow Classic config.json
        # Run the OpenLane flow in Docker using the Classic flow with the provided config.json

    # Step 7: Locate the GDS file generated by OpenLane
    - name: Find and Upload GDS file
      run: |
        echo ">> Estamos aquí"
        pwd
        echo ">> Aquí está todo esto:"
        ls
        
        # Identify the latest run directory
        LAST_RUN_DIR=$(ls -d ${{ github.workspace }}/my_project/runs/RUN_* | sort | tail -n 1)
        # Define the expected GDS file path
        GDS_FILE="$LAST_RUN_DIR/final/gds/my_project.gds"

        echo ">> Aquí está el gds:"
        ls $LAST_RUN_DIR/final/gds/

        if [ -f "$GDS_FILE" ]; then
          # If the GDS file exists, set its path as an environment variable
          echo "GDS file found at: $GDS_FILE"
          echo "gds_path=$GDS_FILE" >> $GITHUB_ENV
        else
          # Exit with an error if no GDS file is found
          echo "Error: No GDS file found in the latest run directory!"
          exit 1
        fi

    # Step 8: Upload the GDS file as an artifact
    - name: Upload GDS file as artifact
      uses: actions/upload-artifact@v4
      with:
        name: myproject-gds  # Artifact name for identification
        path: ${{ env.gds_path }}  # Use the path saved in the environment variable
