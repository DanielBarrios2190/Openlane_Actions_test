name: gdsviewer
on:
  workflow_dispatch:

jobs:
  GDSView:
      permissions:
        pages: write      # to deploy to Pages
        id-token: write   # to verify the deployment originates from an appropriate source

      # Deploy to the github-pages environment
      environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}

      runs-on: ubuntu-latest
      steps:
      
      - name: Buscar repo normal
        uses: actions/checkout@v3

      - name: Descargar GDS
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: flow.yaml
          workflow_conclusion: success
          name: GDS
      
      - name: Mover gds
        run: |
            mkdir ${{ github.workspace }}/gds/
            cp *.gds ${{ github.workspace }}/gds/

      - name: Buscar prerequisitos de PNG
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: librsvg2-bin pngquant
          version: tt05 # I think naming a version builds a reusable packages cache for that name.
        
      - name: Instalar Prerequisitos
        run: |
          pip install appdirs==1.4.4 cairocffi==1.6.0 CairoSVG==2.7.0 certifi==2023.5.7 cffi==1.15.1 charset-normalizer==3.1.0 click==8.1.3 cssselect2==0.7.0 defusedxml==0.7.1 gdstk==0.9.42 gitdb==4.0.10 GitPython==3.1.31 idna==3.4 importlib-resources==5.12.0 mistune==3.0.1 numpy==1.24.3 Pillow==9.5.0 pycparser==2.21 python-frontmatter==1.0.0 pytz==2023.3 PyYAML==6.0 requests==2.31.0 smmap==5.0.0 stripe==5.4.0 tinycss2==1.2.1 urllib3==2.0.3 wasmtime==9.0.0 webencodings==0.5.1 yowasp-runtime==1.22 yowasp-yosys==0.30.0.0.post538 zipp==3.15.0 pre-commit==3.4.0
          pre-commit install
                    
      - name: Render PNG from GDS
        shell: bash
        run: python3 gds2png.py

      - name: Upload gds_render (png) artifact
        uses: actions/upload-artifact@v3
        with:
          name: gds_render
          path: 'gds_render.png'
      
      - name: GDS3D
        uses: actions/checkout@v3
        with:
          repository: mbalestrini/GDS2glTF
        
      - name: Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip' # caching pip dependencies

      - name: Descargar GDS
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: flow.yaml
          workflow_conclusion: success
          name: GDS
      
      - uses: actions/download-artifact@v3
        with:
          name: gds_render

      - name: gds2gltf
        shell: bash
        run: |
          ls -lh
          python -m pip install numpy gdspy triangle pygltflib
          mkdir ${{ github.workspace }}/gh-pages/
          mv gds_render.png ./gh-pages/
          mv ${{ github.workspace }}/*.gds render.gds
          python3 gds2gltf.py render.gds
          cp render.gds.gltf gh-pages/render.gds.gltf

      - name: Crear HTML
        shell: bash
        run: |
          cat << EOF >> gh-pages/index.html
            <!DOCTYPE html>
            <html>
            
            <head>
                <meta charset="utf-8">
                <title>GDS Viewer</title>
                <link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>
                <style>
                    body {
                        margin: 0;
                        font-family: 'Roboto', sans-serif;
                        font-size: 12px;
                    }
                </style>
            </head>
            
            <body>
                <script type="importmap">
                    {
                        "imports": {
                            "objloader" : "https://unpkg.com/three@0.144.0/examples/jsm/loaders/OBJLoader.js",
                            "gltfloader" : "https://unpkg.com/three@0.144.0/examples/jsm/loaders/GLTFLoader.js",
                            "fontloader" : "https://unpkg.com/three@0.144.0/examples/jsm/loaders/FontLoader.js",
                            "orbitcontrols" : "https://unpkg.com/three@0.144.0/examples/jsm/controls/OrbitControls.js",
                            "textgeometry" : "https://unpkg.com/three@0.144.0/examples/jsm/geometries/TextGeometry.js",
                            "three": "https://unpkg.com/three@0.144.0/build/three.module.js",
                            "rectlights": "https://unpkg.com/three@0.144.0/examples/jsm/lights/RectAreaLightUniformsLib.js",
                            "datgui" :  "https://unpkg.com/three@0.144.0/examples/jsm/libs/lil-gui.module.min.js"
                        }
                    }
                </script>
            
                <div style="position: absolute; color:white; left: 5px; top: 5px;">
                    <div>KEYS
                        <br>1: Hide Fill, Decap, Tap cells
                        <br>2: Hide top cell geometry
                        <br>3: Isolate mouse over cell
                    </div>
                    <div id="information">INFO</div>
                </div>
            
                <script>
                    var informationDiv = document.querySelector("div#information");
                </script>
            
                <script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>
            
                <script type="module">
            
                    import * as THREE from 'three';
                    import * as OBJLoader from 'objloader';
                    import { GLTFLoader } from 'gltfloader';
                    import { FontLoader } from 'fontloader';
                    import * as OrbitControls from 'orbitcontrols';
                    import { RectAreaLightUniformsLib } from 'rectlights';
                    import { TextGeometry } from 'textgeometry';
                    import { GUI } from 'datgui';
            
            
                    var GLTF_URL = 'render.gds.gltf';
            
                    const scene = new THREE.Scene();
            
                    var raycaster = new THREE.Raycaster();
                    var mouse = new THREE.Vector2()
            
                    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 10000);
            
                    console.log(camera);
                    camera.position.x = 50;
                    camera.position.y = 130;
                    camera.position.z = -50;
                    camera.up.x = 0;
                    camera.up.y = 0;
                    camera.up.z = -1;
            
                    const renderer = new THREE.WebGLRenderer({ antialias: true });
            
                    scene.background = new THREE.Color(0x202020);
                    renderer.setSize(window.innerWidth, window.innerHeight);
                    document.body.appendChild(renderer.domElement);
            
                    const ambient_light = new THREE.AmbientLight(0x808080); // soft white light
                    scene.add(ambient_light);
            
            
                    RectAreaLightUniformsLib.init();
            
                    const width = 1000;
                    const height = 1000;
                    const intensity = 0.8;
            
                    const rectLight1 = new THREE.RectAreaLight(0xffffA0, intensity, width, height);
                    rectLight1.position.set(200, 400, -200);
                    rectLight1.lookAt(200, 0, -200);
                    scene.add(rectLight1)
            
                    const rectLight2 = new THREE.RectAreaLight(0xA0A0ff, intensity, width, height);
                    rectLight2.position.set(0, 400, 0);
                    rectLight2.lookAt(200, 0, -200);
                    scene.add(rectLight2)
            
            
            
                    var controls = new OrbitControls.OrbitControls(camera, renderer.domElement);
                    controls.target.set(50, 0, -50);
                    controls.update();
            
                    function animate() {
                        requestAnimationFrame(animate);
                        renderer.render(scene, camera);
                    };
            
                    window.onresize = function () {
                        camera.aspect = window.innerWidth / window.innerHeight;
                        camera.updateProjectionMatrix();
                        renderer.setSize(window.innerWidth, window.innerHeight);
                    };
            
                    animate();
            
            
            
                    // const loader = new FontLoader();
                    // var mainFont = null;
                    // loader.load('fonts/helvetiker_regular.typeface.json', function (font) {
                    //     mainFont = font;
                    // });
            
                    const gui = new GUI();
                    const guiViewSettings = gui.addFolder("View Settings");
                    guiViewSettings.open();
                    const guiStatsFolder = gui.addFolder("Stats");
                    guiStatsFolder.close();
            
                    let viewSettings = {
                        "toggleFillerCells": function () {
                            actionToggleFillerCellsVisibility();
                        },
                        "toggleTopCellGeometry": function () {
                            actionToggleTopCelGeometryVisibility();
                        },
                        "materials": [],
                        "materials_visibility": []
                    };
            
                    guiViewSettings.add(viewSettings, "toggleFillerCells");
                    guiViewSettings.add(viewSettings, "toggleTopCellGeometry");
            
            
                    const gltf_loader = new GLTFLoader();
                    gltf_loader.load(
                        GLTF_URL,
                        // called when the resource is loaded
                        function (gltf) {
            
                            scene.add(gltf.scene);
            
                            gltf.scene.rotation.x = -Math.PI / 2;
                            gltf.animations; // Array<THREE.AnimationClip>
                            gltf.scene; // THREE.Group
                            gltf.scenes; // Array<THREE.Group>
                            gltf.cameras; // Array<THREE.Camera>
                            gltf.asset; // Object
            
                            actionToggleFillerCellsVisibility();
            
                            let cell_stats = [];
                            for (var i = 0; i < scene.children.length; i++) {
                                for (var j = 0; j < scene.children[i].children.length; j++) {
                                    for (var k = 0; k < scene.children[i].children[j].children.length; k++) {
                                        var node = scene.children[i].children[j].children[k];
                                        if (node instanceof THREE.Object3D) {
                                            // console.log(node.userData["type"]);
                                            const cell_type = node.userData["type"];
            
                                            if(cell_type==undefined) {
                                                continue;
                                            }
                                            if (cell_stats[cell_type] == undefined) {
                                                cell_stats[cell_type] = 0;
                                            }
                                            cell_stats[cell_type]++;
                                        }
            
                                    }
            
                                }
            
                                // console.log(viewSettings.materials);
                                // console.log(viewSettings.materials_visibility);
                            }
            
                            // showCell = function(c) {
            
                            // };
            
                            var cell_stats_actions = {};
            
                            for (var cell_name in cell_stats) {
                                // guiStatsFolder.add(cell_stats, cell_name);
                                // console.log(cell_name);
                                let c = cell_name;
                                // cell_stats_actions[c] = function() {
                                //     console.log(c);
                                // };
            
                                // let folder = guiStatsFolder.addFolder(cell_name);
                                // folder.add(cell_stats_actions, c);
                                let controller = guiStatsFolder.add(cell_stats, cell_name);
                                controller.domElement.onmouseover = function (event) {
                                    event.stopPropagation();
                                    actionHighlightCellType(c);
                                }
                                controller.domElement.onmouseout = function (event) {
                                    turnOffHighlight();
                                }
            
                            }
            
            
                            scene.traverse(function (object) {
                                if (object.material) {
                                    if (viewSettings.materials[object.material.name] == undefined) {
                                        viewSettings.materials[object.material.name] = object.material;
                                        viewSettings.materials_visibility[object.material.name] = true;
                                        // console.log(object.material.name);
                                        guiViewSettings.add(viewSettings.materials_visibility, object.material.name).onChange(function (new_value) {
                                            viewSettings.materials[this._name].visible = new_value;// viewSettings.materials_visibility[node.material.name];
                                        });
                                    }
                                }
                            })
            
                            // TEXT TEST
                            // const geometry = new TextGeometry('TinyTapeout', {
                            //     font: mainFont,
                            //     size: 1.2,
                            //     height: 0.1,
                            //     curveSegments: 12,
                            //     bevelEnabled: false,
                            //     bevelThickness: 0.1,
                            //     bevelSize: 0.1,
                            //     bevelOffset: 0,
                            //     bevelSegments: 5
                            // });
                            // const textMesh = new THREE.Mesh(geometry);
                            // textMesh.rotation.x = -Math.PI / 2;
                            // scene.children[0].add(textMesh);
            
                        },
                        // called while loading is progressing
                        function (xhr) {
                            console.log((xhr.loaded / xhr.total * 100) + '% loaded');
                        },
                        // called when loading has errors
                        function (error) {
                            console.log('An error happened');
                        }
                    );
            
            
                    const highlightMaterial = new THREE.MeshBasicMaterial({ color: 0x50f050 });
                    highlightMaterial.name = "HIGHLIGHT";
                    var previousMaterials = null;
                    var highlightedObjects = null;
            
                    var cellDetailMode = false;
            
                    window.onmousedown = function (event) {
                        // if (event.buttons != 0 || cellDetailMode)
                            // return;
                        if (cellDetailMode)
                            return;
            
                        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
                        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
                        raycaster.setFromCamera(mouse, camera);
            
                        var intersects = raycaster.intersectObject(scene, true);
            
                        turnOffHighlight();
            
            
                        if (intersects.length > 0) {
                            for (var i = 0; i < intersects.length; i++) {
                                var object = intersects[i].object;
                                if (object.parent.parent.name != "" && object.parent.visible) {
                                    informationDiv.innerHTML = ("Mouse over: " + object.parent.name + " (" + object.parent.userData["type"] + ")");
            
                                    
                                    if (highlightedObjects == null) {
                                        highlightedObjects = [];
                                        previousMaterials = [];
                                    }
            
                                    let node = object.parent;
                          
                                    for (var mesh_idx = 0; mesh_idx < node.children.length; mesh_idx++) {
                                        let obj = node.children[mesh_idx];
                                        if(obj instanceof THREE.Mesh) {
                                            
                                            if (highlightedObjects.indexOf(obj) == -1) {
                                                previousMaterials.push(obj.material);
                                                highlightedObjects.push(obj);
                                                obj.material = highlightMaterial;
                                                
                                                
                                            }
                                        }
                                    }
            
                                    
            
                                }
                                // object.material.color.set(Math.random() * 0xffffff);
                            }
                        }
                    }
            
                    function turnOffHighlight() {
                        if (highlightedObjects != null) {
                            for (var i = 0; i < highlightedObjects.length; i++) {
                                // console.log(highlightedObjects[i]);
                                highlightedObjects[i].material = previousMaterials[i];
                                // highlightedObjects[i].visible = false;// = null;
                            }
                            highlightedObjects = null;
                            previousMaterials = null;
                        }
                    }
            
                    function actionToggleFillerCellsVisibility() {
                        for (var i = 0; i < scene.children.length; i++) {
                            for (var j = 0; j < scene.children[i].children.length; j++) {
                                for (var k = 0; k < scene.children[i].children[j].children.length; k++) {
                                    var node = scene.children[i].children[j].children[k];
                                    if (node.userData["type"] != undefined) {
                                        if (node.userData["type"].indexOf("fill") != -1
                                            ||
                                            node.userData["type"].indexOf("decap") != -1
                                            ||
                                            node.userData["type"].indexOf("tap") != -1
                                        ) {
                                            node.visible = !node.visible;
                                        }
                                    }
                                }
                            }
                        }
                    }
            
                    function actionToggleTopCelGeometryVisibility() {
                        for (var i = 0; i < scene.children.length; i++) {
                            for (var j = 0; j < scene.children[i].children.length; j++) {
                                for (var k = 0; k < scene.children[i].children[j].children.length; k++) {
                                    var node = scene.children[i].children[j].children[k];
                                    if (node instanceof THREE.Mesh) {
                                        // console.log(node);
                                        if (node.material.name != "substrate")
                                            node.visible = !node.visible;
                                    }
                                }
                            }
                        }
                    }
            
                    function actionHighlightCellType(cell_type) {
                        turnOffHighlight();
                        
                        if (highlightedObjects == null) {
                            highlightedObjects = [];
                            previousMaterials = [];
                        }
            
                        for (var i = 0; i < scene.children.length; i++) {
                            for (var j = 0; j < scene.children[i].children.length; j++) {
                                for (var k = 0; k < scene.children[i].children[j].children.length; k++) {
                                    let node = scene.children[i].children[j].children[k];
                                    if (node.userData["type"] != undefined && node.userData["type"] == cell_type) {
                                        //node.visible = !node.visible;                            
            
                                        for (var mesh_idx = 0; mesh_idx < node.children.length; mesh_idx++) {
                                            let obj = node.children[mesh_idx];
                                            if(obj instanceof THREE.Mesh) {
                                                
                                                if (highlightedObjects.indexOf(obj) == -1) {
                                                    previousMaterials.push(obj.material);
                                                    highlightedObjects.push(obj);
                                                    obj.material = highlightMaterial;
                                                   
                                                    
                                                }
                                            }
                                        }
            
                                    }
                                }
                            }
                        }
                    
                    }
            
            
                    window.onkeypress = function (event) {
                        // console.log(event.key);
                        if (event.key == "1") {
                            actionToggleFillerCellsVisibility();
            
            
                        } else if (event.key == "2") {
                            actionToggleTopCelGeometryVisibility();
                        } else if (event.key == "3") {
                            if (!cellDetailMode && highlightedObjects != null) {
                                cellDetailMode = true;
                                // console.log(highlightedObject.parent);
                                for (var i = 0; i < scene.children.length; i++) {
                                    for (var j = 0; j < scene.children[i].children.length; j++) {
                                        for (var k = 0; k < scene.children[i].children[j].children.length; k++) {
                                            var node = scene.children[i].children[j].children[k];
                                            if (node instanceof THREE.Object3D && node != highlightedObjects[0].parent) {
                                                node.visible = false;
                                            }
                                        }
                                    }
                                }
            
            
            
                                controls.saveState();
            
                                var viewCenter =  new THREE.Vector3;
                                const bbox = new THREE.BoxHelper( highlightedObjects[0].parent, 0xffff00 );
                                bbox.geometry.computeBoundingBox();
                                bbox.geometry.boundingBox.getCenter(viewCenter);
                                //scene.add(box);
                                turnOffHighlight();
            
                                camera.position.x = viewCenter.x;
                                camera.position.y = 20;;
                                camera.position.z = viewCenter.z;
            
                                camera.up.x = 0;
                                camera.up.y = 0;
                                camera.up.z = -1;
                                controls.target.set(viewCenter.x, 0, viewCenter.z);
                                controls.update();
            
                            } else {
                                cellDetailMode = false;
            
                                for (var i = 0; i < scene.children.length; i++) {
                                    for (var j = 0; j < scene.children[i].children.length; j++) {
                                        for (var k = 0; k < scene.children[i].children[j].children.length; k++) {
                                            var node = scene.children[i].children[j].children[k];
                                            if (node instanceof THREE.Object3D) {
                                                node.visible = true;
                                            }
                                        }
                                    }
                                }
                                controls.reset();
                                // camera.position.set(prevCameraPos);                    
                                // // camera.up.set(prevCameraUp);
                                // controls.target.set(prevControlTarget);
                                controls.update();
                            }
                        }
                    };
            
            
                </script>
            </body>
            
            </html>
          EOF

      - name: Subir Pagina
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'gh-pages'

      - name: Compartir con Github-Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Summary
        shell: bash
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          PAGE_URL=$(echo "$PAGE_URL" | sed -e 's/\/$//')
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # 3D Viewer
          [open 3D viewer](https://gds-viewer.tinytapeout.com/?model=$PAGE_URL/tinytapeout.gds.gltf)

          # 2D Preview
          ![png]($PAGE_URL/gds_render.png)
          EOF
